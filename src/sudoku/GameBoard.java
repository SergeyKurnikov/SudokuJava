
package sudoku;

/**
 * Класс игрового поля. здесь находятся шаблоны игрового поля и методы работы с полем
 * @autor Сергей Курниов
 * @version 1.0.0
 */


public class GameBoard {

    private char[][] solution;  /** массив для хранения эталлоного решения лёгкого уровня */
    private char[][] solutionM; /** массив для хранения эталлоного решения среднего уровня */
    private char[][] solutionH; /** массив для хранения эталлоного решения сложного уровня */
    private char[][] initial;   /** массив для хранения задния лёгкого уровня */
    private char[][] initialM;  /** массив для хранения задния среднего уровня */
    private char[][] initialH;  /** массив для хранения задния сложного уровня */
    private char[][] player;    /** массив для хранения выбранного задания*/

    private int level;         /** массив для хранения задния сложного уровня */


    /**
     * Конструктор класса игровых полей
     * Инициализация шаблонов
     */
    public GameBoard() {
        solution = new char[][]
                {
                        {'8','7','9','4','3','5','2','1','6'},
                        {'3','6','2','9','7','1','5','4','8'},
                        {'5','1','4','8','2','6','7','3','9'},
                        {'9','5','6','7','4','8','1','2','3'},
                        {'1','4','7','3','6','2','8','9','5'},
                        {'2','3','8','5','1','9','4','6','7'},
                        {'7','8','1','6','9','4','3','5','2'},
                        {'6','2','5','1','8','3','9','7','4'},
                        {'4','9','3','2','5','7','6','8','1'}
                };


        solutionM = new char[][]
                {
                        {'8','2','3','9','6','7','1','5','4'},
                        {'7','1','6','3','4','5','8','2','9'},
                        {'5','9','4','1','2','8','6','3','7'},
                        {'9','6','1','7','3','2','5','4','8'},
                        {'4','7','8','6','5','9','2','1','3'},
                        {'2','3','5','4','8','1','7','9','6'},
                        {'6','5','9','8','1','4','3','7','2'},
                        {'1','8','7','2','9','3','4','6','5'},
                        {'3','4','2','5','7','6','9','8','1'}
                };

        solutionH = new char[][]
                {
                        {'6','7','5','1','2','8','4','9','3'},
                        {'2','1','3','9','4','5','7','6','8'},
                        {'9','8','4','7','3','6','5','2','1'},
                        {'3','6','8','2','7','4','1','5','9'},
                        {'4','9','2','5','6','1','8','3','7'},
                        {'1','5','7','8','9','3','6','4','2'},
                        {'5','4','9','3','1','7','2','8','6'},
                        {'8','2','1','6','5','9','3','7','4'},
                        {'7','3','6','4','8','2','9','1','5'}
                };

        initial = new char[][]
                {
                        {'8','-','-','-','-','5','2','-','-'},
                        {'-','6','-','9','-','1','5','4','8'},
                        {'5','-','-','8','-','6','-','3','-'},
                        {'-','-','6','7','-','8','1','2','3'},
                        {'1','4','-','-','-','-','8','-','-'},
                        {'-','-','-','5','1','-','4','6','-'},
                        {'7','-','-','6','-','-','3','5','2'},
                        {'6','2','5','-','-','-','-','7','-'},
                        {'4','-','3','-','5','7','6','-','-'}

                };
        initialM = new char[][]
                {
                        {'8','2','-','-','6','7','-','-','-'},
                        {'-','1','-','-','4','5','-','-','9'},
                        {'-','9','-','-','-','-','-','3','7'},
                        {'9','6','-','-','3','2','-','-','8'},
                        {'-','7','-','-','-','9','2','1','3'},
                        {'-','-','-','-','8','-','-','-','-'},
                        {'-','-','-','8','-','-','3','-','-'},
                        {'-','-','7','2','-','-','-','-','5'},
                        {'-','-','2','-','7','-','-','8','-'}
                };

        initialH = new char[][]
                {
                        {'-','7','5','1','-','8','-','-','-'},
                        {'2','-','-','-','-','-','-','-','8'},
                        {'9','-','-','7','3','-','-','-','-'},
                        {'-','-','-','-','-','4','-','-','-'},
                        {'-','-','2','-','6','-','-','3','-'},
                        {'-','-','-','-','-','-','6','-','2'},
                        {'5','-','-','3','1','7','-','-','-'},
                        {'8','2','-','-','5','-','3','-','-'},
                        {'-','-','-','4','-','-','-','1','5'}
                };

        player = new char[9][9];
    }

    /**
     * Метод получения решения лёгкого уровня
     * @return возвращает решение
     */
    public char[][] getSolution() {
        return solution;
    }

    /**
     * Метод получения решения среднего уровня
     * @return возвращает решение
     */
    public char[][] getSolutionM() {
        return solutionM;
    }

    /**
     * Метод получения решения высокого уровня
     * @return возвращает решение
     */
    public char[][] getSolutionH() {
        return solutionH;
    }

    /**
     * Метод получения задания лёгкого уровня
     * @return возвращает проинициализимрованный массив
     */
    public char[][] getInitial() {
        return initial;
    }

    /**
     * Метод получения задания среднего уровня
     * @return возвращает проинициализимрованный массив
     */
    public char[][] getInitialM() {
        return initialM;
    }

    /**
     * Метод получения задания сложного уровня
     * @return возвращает проинициализимрованный массив
     */
    public char[][] getInitialH() {
        return initialH;
    }

    /**
     * Метод получения массива игрока
     * @return возвращает массиив выбранного уровня
     */
    public char[][] getPlayer() {
        return player;
    }


    /**
     * Метод получения уровня
     * @return возвращает выбранный уровень сложности
     */
    public int getLevel(){
        return level;
    }

    /**
     * Метод установки уровня
     * @return устанавливавет выбранный уровень сложности
     */
    public void setLevel(int level){
        this.level=level;
    }


    /**
     * Метод изменения значений в массиве игрока на лёгком уровне
     * @param val - символьное значение цифры
     * @param row - количество строк массива
     * @param col - количество столбцов массива
     */
    public void modifyPlayer(char val, int row, int col) {

        if (initial[row][col] == '-') {

            player[row][col] = val;
        }

    }

    /**
     * Метод изменения значений в массиве игрока на среднем уровне
     * @param val - символьное значение цифры
     * @param row - количество строк массива
     * @param col - количество столбцов массива
     */
    public void modifyPlayerM(char val, int row, int col) {
        if (initialM[row][col] == '-') {
            player[row][col] = val;
        }

    }

    /**
     * Метод изменения значений в массиве игрока на сложном уровне
     * @param val - символьное значение цифры
     * @param row - количество строк массива
     * @param col - количество столбцов массива
     */
    public void modifyPlayerH(char val, int row, int col) {
        if (initialH[row][col] == '-') {
            player[row][col] = val;
        }

    }


    /**
     * Метод проверки решения на лёгком уровне
     * @return флаг успешности решения
     */
    public boolean checkForSuccess() {
        for(int row = 0; row<9; row++) {
            for(int col = 0; col<9; col++) {

                if(initial[row][col] == '-') {
                    if(player[row][col] != solution[row][col]) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    /**
     * Метод проверки решения на среднем уровне
     * @return флаг успешности решения
     */
    public boolean checkForSuccessM() {
        if(player[0][0]==solutionM[0][0])
            return true;

        return false;
    }

    /**
     * Метод проверки решения на сложном уровне
     * @return флаг успешности решения
     */
    public boolean checkForSuccessH() {
        for(int row = 0; row<9; row++) {
            for(int col = 0; col<9; col++) {
                if(initialH[row][col] == '-') {
                    if(player[row][col] != solutionH[row][col]) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}